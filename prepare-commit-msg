#!/usr/bin/env bash
# Git hook: prepare-commit-msg
# Suggest commit messages (JA/EN) via OpenAI API (chat.completions).
# Requires:
#   - OPENAI_API_KEY in env
#   - jq installed

set -euo pipefail

MSG_FILE=$1

# 1) Collect staged diff (exit if none)
DIFF_RAW="$(git diff --cached)"
if [ -z "$DIFF_RAW" ]; then
  exit 0
fi

# 2) Build JSON payload safely with jq (escape newlines/quotes)
#    - Pass diff as variable -> jq builds JSON => no quoting issues
PAYLOAD="$(jq -n --arg diff "$DIFF_RAW" '{
  model: "gpt-4o-mini",
  temperature: 0.4,
  max_tokens: 200,
  messages: [
    {role: "system", content: "You are a helpful assistant. Generate concise, Conventional-Commits-like messages. Output both Japanese and English."},
    {role: "user", content: ("Generate a concise commit message in **Japanese** AND **English** for this git diff:\n\n" + $diff)}
  ]
}')"

# 3) Call OpenAI API
RESP="$(curl -sS https://api.openai.com/v1/chat/completions \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer $OPENAI_API_KEY" \
  -d "$PAYLOAD" || true)"

# 4) Extract message OR error
SUGGESTION="$(printf '%s' "$RESP" | jq -r '.choices[0].message.content // empty')"
ERROR_MSG="$(printf '%s' "$RESP" | jq -r '.error.message // empty')"

# 5) Fallbacks / diagnostics
if [ -z "$SUGGESTION" ]; then
  SUGGESTION="(no suggestion)"
fi

# 6) Prepend comment block (wrap lines with '# ')
{
  echo "# --- ChatGPT Suggested commit message ---"
  if [ -n "$ERROR_MSG" ]; then
    echo "# [OpenAI error] $ERROR_MSG"
  fi
  # Limit length to keep the editor tidy (optional)
  echo "$SUGGESTION" | sed 's/^/# /'
  echo
  cat "$MSG_FILE"
} > "$MSG_FILE.tmp" && mv "$MSG_FILE.tmp" "$MSG_FILE"
